# This is a basic workflow to help you get started with Actions

name: Deploy To Dev Digital Ocean Droplet

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build Docker Images
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: dev

    # Steps represent a sequence of tasks that will be executed as part of the job #
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout master
        uses: actions/checkout@v3
        with:
          ref: dev

      # Runs a single command using the runners shell#
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Add environment variables to .env
        run: |
          echo DEBUG=0 >> .env
          echo SQL_ENGINE=django.db.backends.postgresql >> .env
          echo DATABASE=postgres >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
          echo AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} >> .env
          echo AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} >> .env
          echo SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }} >> .env
          echo SMTP_USERNAME=${{ secrets.SMTP_USERNAME }} >> .env
          echo TWILIO_ACCOUNT_SID=${{ secrets.TWILIO_ACCOUNT_SID }} >> .env
          echo TWILIO_AUTH_TOKEN=${{ secrets.TWILIO_AUTH_TOKEN }} >> .env
          echo TWILIO_MESSAGING_SERVICE_SID=${{ secrets.TWILIO_MESSAGING_SERVICE_SID }} >> .env
          echo TWILIO_SMS_NUMBER=${{ secrets.TWILIO_SMS_NUMBER }} >> .env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp  -o StrictHostKeyChecking=no -r ./.env mobolaji00@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/app
          echo $(pwd)
          rsync -rav -e ssh --include '*/' --exclude='.git/*' $(pwd)/ mobolaji00@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/app/ 
          ssh -o StrictHostKeyChecking=no mobolaji00@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
            cd /app
            source .env
            echo "y" |docker system prune
            echo "${{ secrets.DROPLET_SUDO_PASSWORD }}" | sudo -S service docker stop
            echo "${{ secrets.DROPLET_SUDO_PASSWORD }}" | sudo -S service docker start
            docker compose down
            docker compose -f docker-compose-dev.yml build --build-arg SMTP_USERNAME=$SMTP_USERNAME --build-arg SMTP_PASSWORD=$SMTP_PASSWORD --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --build-arg TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID --build-arg TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN --build-arg TWILIO_MESSAGING_SERVICE_SID=$TWILIO_MESSAGING_SERVICE_SID --build-arg TWILIO_SMS_NUMBER=$STWILIO_SMS_NUMBER --build-arg GOOGLE_CREDENTIALS_JSON=$GOOGLE_CREDENTIALS_JSON 
            docker compose -f docker-compose-dev.yml up
          ENDSSH


